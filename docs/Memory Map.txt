

	-- ROM map --
		-- MB 1 --
		Bank $00-$0F	SMW code/data, LM code, music data
		Bank $10-$11	unknown, but definitely used
	*	Bank $12	SP_Menu, VR3
		Bank $13	SP_Patch
		Bank $14	FusionCore (includes particle engine)
		Bank $15	PCE
		Bank $16	Fe26
		Bank $17	Fe26
	*	Bank $18	SP_Level
		Bank $19	SP_Level
		Bank $1A	Fe26
		Bank $1B-$1F	--------
		-- MB 2 --
		Bank $20-$2F	--------
		Bank $30-$3F	SP_Files
		-- MB 3 --
		Bank $80-$9F	LM data
		-- MB 4 --
		Bank $A0-$BF	LM data


	-- WRAM map --
		LoRAM:
		$0000-$001F:	32 B	SNES scratch RAM.
		$0020-$005F:	64 B	Tilemap for top row of dynamic BG3.
		$0060-$009F:	64 B	Status bar tilemap for dynamic BG3.
		$00A0-$00B5:	22 B	Colors 0x01-0x0B for dynamic BG3 palette.
		$00B6-$00CB:	22 B	Status bar palette for dynamic BG3.
		$00CC-$00CD:	2 B	Used by VR3.
		$00CE-$00FF:	20 B	----
		$0100-$01FF:	256 B	SNES DP for MPU operation
		$0200-$03FF:	512 B	Table for HDMA channel 2 (message box).
		$0400-$05FF:	512 B	Table for HDMA channel 3.
		$0600-$07FF:	512 B	Table for HDMA channel 4.
		$0800-$09FF:	512 B	Table for HDMA channel 5.
		$0A00-$0BFF:	512 B	Table for HDMA channel 6.
		$0C00-$0DFF:	512 B	Table for HDMA channel 7.
		$0E00-$0FFF:	512 B	RAM code for SNES to apply lighting in background mode
		$1000-$1DFF:	3.4 KB	backup for layer 3 GFX during text box (normal = $900 bytes, cinematic = $D90 bytes)
		$1E00-$1E7F:	128 B	----
		$1E80-$1EA5:	38 B	Vitor's RAM codes
		$1EA6-$1EFF:	90 B	custom RAM codes (see SP_Menu.asm)
		$1F00-$1F0B:	12 B	$43X2 mirrors for HDMA channels 2-7, 2 bytes each
		$1F0C:		1 B	HDMA enable double mirror (set at the end of each frame, used to minimize errors caused by lag)
		$1F0D-$1FFF:	243 B	SNES stack.

		Bank $7E:
		$2000-$7CFF:	24 KB	GFX32, decompressed.
		$7D00-$ACFF:	12 KB	GFX33, decompressed.
		$AD00-$B0FF:	1 KB	AddmusicK data. (?)
		$B100-$B37F:	640 B	decompressed GFX for overworld.
		$B380-$B67F:	768 B	decompressed Game Over graphics.
		$B680-$B8FF:	640 B	---- this area is used as an intermediate for compression
		$B900-$BCFF:	1 KB	---- (it likely holds the GFX while SA-1 keeps decompressing to $410000)
		$BD00-$BFFF:	1 KB	---- (lots of stuff is written here during loading)
		$C000-$C7FF:	2 KB	used for Lunar Magic exanimation
		$C800-$FBFF:	13 KB	decompressed GFX
		$FC00-$FFFF:	1 KB	lighting data
		Bank $7F:
		$0000-$3FFF:	16 KB	BG2 event tilemap for overworld
		$4000-$7FFF:	16 KB	BG2 tilemap for overworld
		$8000-$8182:	387 B	----
		$8183-$837A:	504 B	Lunar Magic animation stuff (details unknown)
		$837B-$977A:	4.9 KB	Stripe Image table
		$977B-$9A7A:	768 B	sprite text GFX, decompressed (Start, Game Over, etc.)
		$9A7B-$9C7A:	512 B	----
		$9C7B-$BBFF:	7.9 KB	misc. (mostly unused, details unknown)
		$BC00-$BFFF:	1 KB	layer 2 background map16 numbers (lo bytes)
		$C000-$C0FF:	256 B	used by Lunar Magic for animation functions, see comments in VR3.asm for more details
		$C100-$C2FF:	512 B	---- (seemingly unused)
		$C300-$C6FF:	1 KB	layer 2 background map16 numbers (hi bytes, add 0x80)
		$C700-$C7FF:	256 B	unknown, mostly unused
		$C800-$FFFF:	14 KB	decompressed GFX


	-- I-RAM map --

		$3000-$30FF:	256 B	SNES/SA-1 DP
		$3100-$313F:	64 B	SA-1 DP for MPU operation
		$3140-$3147:	8 B	VRAM remap registers, see Defines
		$3148-$314F:	8 B	camera backup (4 bytes), camera movement (2 slots, 2 bytes each)
		$3150-$315F:	16 B	dynamic tile sprite usage
		$3160-$316F:	16 B	light list, 1 byte for each palette row, determines color handling
		$3170:		1 B	----
		$3171:		1 B	which buffer is currently being written to by shader
		$3172-$3175:	4 B	start/end index for dynamic lighting
		$3176-$317B:	6 B	lighting RGB values
		$317C:		1 B	dynamic lighting process flag (0 = start new, 1 = processing, 2 = done, highest bit signals that an upload is ready)
		$317D:		1 B	SNES status in dual thread operation
		$317E:		1 B	SA-1 status in dual thread operation
		$317F:		1 B	CCDMA slots in use
		$3180-$3182:	3 B	code pointer for SNES -> SA-1 call
		$3183-$3185:	3 B	code pointer for SA-1 -> SNES call
		$3186-$3188:	3 B	code pointer for SA-1 background mode
		$3189:		1 B	set to 1 when SNES -> SA-1 call is finished
		$318A:		1 B	set to 1 when SA-1 -> SNES call is finished
		$318B:		1 B	background mode flag
		$318C:		1 B	set to 1 when SA-1 DMA is finished
		$318D:		1 B	set to 1 when SA-1 is ready for CCDMA
		$318E:		1 B	emulator flags
		$318F:		1 B	mirror of $2225 (BWRAM mirror register)
		$3190-$31DF:	80 B	CCDMA table (10 slots of 8 bytes each)
		$31E0-$31FF:	32 B	reserved for SA-1 background mode
		$3200-$35FF:	1024 B	Sprite data, expanded by physics+
		$3600-$367F:	128 B	Player 1 data
		$3680-$36FF:	128 B	Player 2 data
		$3700-$377F:	128 B	CCDMA buffer / tilemap assembly area ("Big RAM") / extended scratch
		$3780-$37FF:	128 B	SA-1 stack

	-- BW-RAM --
		Image:
		$6000-$601F:	32 B	scratch
		$6020-$6021:	2 B	RAMcode flag (0x1234 = go, anything else = disable)
		$6022-$6023:	2 B	RAMcode offset
		$6024-$6027:	4 B	----
		$6028-$602F:	8 B	sprite palset options (highest bit = loaded, rest is index to palset data)
		$6030-$604F:	32 B	sprite tables used for dynamic file loading
		$6050-$6074:	37 B	palset information for FusionCore sprites
		$6075-$607F:	11 B	----
		$6080-$60FF:	128 B	---- (used to be !BigRAM)
		$6100-$610F:	16 B	SMW's $0100-$010F
		$6110-$6113:	4 B	Assume that level code uses this
		$6114-$611F:	12 B	----
		$6120-$617F:	96 B	best rank score for each level (level data byte 3)
		$6180-$61EF:	112 B	holds LM dynamo data during RAM code generation
		$61F0-$61FF:	16 B	used during layer tilemap update
		$6200-$63FF:	512 B	OAM, lo table
		$6400-$641F:	32 B	OAM, hi table
		$6420-$649F:	128 B	OAM, hi table buffer
		$64A0-$667F:	480 B	---- (used as an HDMA table on title screen, otherwise free)
		$6680-$7FFF:	6.4 KB	SMW's $0680-$1FFF

		$6905-$6AF4:	496 B	SMW's work area for overworld palette animations, unused
					Instead, I use it like this:
					$6905-$6906: 2 B, layer 2 map16 offset when layer 2 is set to level
					$6907:	     1 B, ----
					$6908-$960F: 8 B, update flags for tilemap zips
					$6910-$694F: 64 B, tilemap data for layer 1 column
					$6950-$699F: 80 B, tilemap data for layer 1 row
					$69A0-$69DF: 64 B, tilemap data for layer 2 column (used for layer 2 level)
					$69E0-$6A5F: 128/80 B, tilemap data for layer 2 row (size varies, always used)
					$6A60-$6ABF: 96 B, checkpoint level, lo byte (level data byte 2)
					$6AC0-$6AC9: 10 B, camera box registers
					$6ACA-$6AF4: 43 B, ----

		$6DDF-$6EF4:	278 B	SMW's overworld sprite data
					I use it as 3D tilemap cache

		$7938-$79B7:	128 B	SMW's sprite load status table, moved to $418A00
					I use it like this:
					$7938-$7997: 96 B, best time per level, seconds (level data byte 4)
					$7998-$79B7: ----

		$7EA2-$7F01:	96 B	level data byte 1, format different from SMW's format

		$7F49-$7FD5:	141 B	SMW's buffer for $7EA2-$7F2E, no real purpose in EMW
					I use it like this:
					$7F49-$7FA8: 96 B, best time per level, minutes (level data byte 5)
					$7FA9-$7FAF: ----
					$7FB0-$7FBF: priority data for OAM
					$7FC0-$7FD5: ----


		areas free due to moving sprites to I-RAM:
		$74C8-$75E8:	289 B	last byte unused in vanilla, next byte is !SpriteIndex
		$75EA-$7691:	167 B	next byte is sprite memory setting (from header)
		$786C-$7877:	12 B	sprite off screen flag, vertical
		$787B-$7886:	12 B	sprite stomp immunity flag
		$790F-$791B:	13 B	tweaker 6, last byte is unused in vanilla
		$7FD6-$7FED:	24 B	unused sprite table and misc (water/cape etc) timer


		Bank $40:
		$0000-$1FFF:	8 KB	BW-RAM image
		$2000-$3FFF:	8 KB	reserved for CCDMA uploads
		$4000-$43FF:	1024 B	last KB of image cache, usually only used as a backup for layer 3 tilemap
		$4400-$44FF:	256 B	message box data
		$4500-$48FF:	1024 B	VR3 RAM
		$4900-$49FF:	256 B	DEBUG: CPU performance data
		$4A00-$4DFF:	1024 B	RAM code area for fast upload
		$4E00-$4E7F:	128 B	player backup data
		$4E80-$4E80:	1 B	multiplayer flag
		$4E81-$4E81:	1 B	current player during PCE/menu processing
		$4E82-$4E83:	2 B	----
		$4E84-$6FFF:	8.3 KB	misc, check !Defines ($404EB8 holds rendering backup regs, $404EF8 is 1KB area for HSL colors)
		$7000-$AFFF:	16 KB	decompression buffer
		$B000-$C7FF:	6 KB	----
		$C800-$FFFF:	14 KB	Map16 lo byte table

		Bank $41:
		$0000-$7FFF:	32 KB	decompressed GFX
		$8000-$80FF:	256 B	Map16 remap table (see !Defines for details)
		$8100-$82FF:	512 B	GFX load status table (256 pseudo-dynamic files, 128 super-dynamic files, 128 sprite palsets)
		$8300-$87FF:	1.25 KB	----
		$8800-$89FF:	512 B	wiggler data
		$8A00-$8AFE:	255 B	sprite/shooter load status (00: reload, EE: never reload)
		$8AFF-$8FF7:	1.25 KB	----
		$8FF8-$8FFF:	8 B	index to OAM mirrors, 16-bit index to each table
		$9000-$99FF:	2.5 KB	OAM mirrors (p0-p3, 4 lo tables followed by 4 hi tables, decompressed)
		$9A00-$A0A3:	1.7 KB	particle data (17 bytes / particle, total 100 particles)
		$A0A4-$A0AF:	12 B	reserved for shared particle settings
		$A0B0-$AFFF:	3.8 KB	----
		$B000-$B2FF:	768 B	save file 1
		$B300-$B5FF:	768 B	save file 2
		$B600-$B8FF:	768 B	save file 3
		$B900-$BBFF:	768 B	permanent SRAM
		$BC00-$BFFF	1 KB	SRAM buffer
				$BC00 - misc SRAM buffer data (see defines)
				$BC10 - database buffer
				$BC50 - character data buffer
				$BC8C - story flags buffer
				$BD1A - ----
		$C000-$C7FF:	2 KB	2D/3D Cluster Joint data
		$C800-$FFFF:	14 KB	Map16 hi byte table







	; Plan:
	;	- Give Mario a proper GFX loader. Include fireballs here.
	;	- Make P switch go poof (state 4) instead of smushing, to save space.
	;	- Turn contact GFX into a 16x16 tile.

	;	- Remove feather.
	;	- Remove 253.
	;	- Remove !
	;	- Remove -
	;	- Remove <->
	;	- Remove berry.
	;	- Remove fish.
	;	- Remove Bullet Bill.
	;	- Remove bonus coin.
	;	- Remove goal tape.

	; SP1: Standard
	;	- Player 1 dynamic area	(4 tiles)
	;	- Player 1 extra area	(2 tiles)
	;	- Player 2 dynamic area	(4 tiles)
	;	- Player 2 extra area	(2 tiles)	USE WITH SENKU TO MAKE IT LOOK COOLER!!!
	;	- Bounce sprites	(4 tiles)
	;	- Mushroom		(1 tile)
	;	- Flower		(1 tile)
	;	- Starman		(1 tile)
	;	- P switch		(1 tile)
	;	- Trampoline		(3 8x8 tiles)
	;	- Bubble		(1 8x8 tile)
	;	- Debris		(4 8x8 tiles, up from 2 8x8 tiles)
	;	- Coin			(1 16x16 tile, 2 8x8 tiles)
	;	- Star			(2 8x8 tiles)
	;	- Smoke puff		(4 tiles)
	;	- Water splash		(2 tiles)
	;	- Contact GFX		(1 tile, up from 2 8x8 tiles)
	;	- Glitter		(4 8x8 tiles)

	; SP2: Rex Island
	;	- Koopa Renegade	(8 tiles)
	;	- Shelless Koopa	(8 tiles)
	;	- Koopa shell		(3 tiles)
	;	- Bat wings		(3 tiles)
	;	- Smushed koopa		(1 8x8 tile)
	;	- Piranha Plant		(2 16x16 tiles, 2 8x8 tiles)
	;	- Sign			(3 tiles)
	;	- Goomba		(2 tiles)
	;	- SBG area		(2 tiles)



	; SP1 remaps to do:
	;	- Remap Mario		(RAM reg)
	;	- Remap fireballs	(RAM reg)
	;	- Remap Kadaal		(RAM reg)
	;	- Remap bounce sprites	(static)	X
	;	- Remap mushroom	(static)	X
	;	- Remap flower		(static)	X
	;	- Remap starman		(static)	X
	;	- Remap P switch	(static)	X
	;	- Remap trampoline	(static)	X
	;	- Remap bubble		(static)	X
	;	- Remap debris		(static)	X
	;	- Remap coin		(static)	X
	;	- Remap star		(static)	X
	;	- Remap glitter		(static)	X

	; SP2 remaps to do:
	;	- Koopa shell		(RAM reg)
	;	- Wings			(RAM reg)
	;	- Smushed koopa		(RAM reg)
	;	- Piranha Plant		(RAM reg)
	;	- Sign			(RAM reg)
	;	- Goomba		(RAM reg)

	; Coding to do:
	;	- Make P switch go poof
	;	- Remake contact GFX
	;	- Remake Koopa GFX routine



	; GFX routine (BounceSprGFX) starts at $0291F8.
	; Tile number comes from a table at $029252 (first byte unused).
	; Table is indexed by bounce sprite number.
	; - Qblock ($2A -> $0C)
	; - Tblock ($40 -> $0E)
	org $029252
	BOUNCE_SPRITE:
		db $1C,$0E,$6B,$0C,$42,$EA,$8A,$0E


	; Mushroom, flower, star, feather, and 1-up get tiles from a table.
	; Table is at $01C609 and is indexed by [sprite number]-0x74.
	; Mush ($24 -> $40)
	; Flow ($26 -> $42)
	; Star ($48 -> $44)
	; Feat ($0E -> N/A)
	org $01C609
	POWERUP:
		db $40,$42,$44,$FF,$40


	; $019B83 (SprTilemap) controls the P switch.
	; The procedure is:
	;	LDY $9E,x
	;	LDA $1602,x
	;	CLC : ADC $9C7F,y
	;	TAX
	;	LDA $9B83,x
	; Address $019C1C (index = 0x99) is the P switch's tile number.
	org $019C1C
	PSWITCH:
		db $46


	; Springboard/trampoline is weird.
	; Tiles are at $019C1D-$019C28 (12 bytes).
	; Procedure:
	;	LDY $9E,x	; Y = 0x2F
	;	LDA $1602,x	; \ GFX index * 4
	;	ASL #2		; / (each frame is 4 8x8 tiles)
	;	ADC $9C7F,y	; Add 0x9A ($019CAE)
	;	CLC : ADC $04	; Add loop count
	;	TAX		; X = [00-02]*4 + [0x9A] + [00-03] (0x00-0x0B)
	;	LDA $9B83,x	; Get tile number
	; $28 -> $48
	; $4C -> $49
	; $6F -> $58
	; $83 -> $81 (empty tile)
	org $019C1D
		db $48,$48,$48,$48	; Frame 1
		db $49,$49,$49,$49	; Frame 2
		db $81,$81,$58,$58	; Frame 3


	; Bubble is simple. Its code starts at $029EEE (WaterBubble).
	; $1C -> $59
	org $029F5B
		LDA #$59

	; Spin jump star is also simple. Code starts at $029C83 (SpinJumpStars).
	; $EF -> $4F
	org $029C93
		LDA #$4F


	; Sprite coin has its own routine at $01C641 (CoinSprGfx).
	; The 16x16 tile is simply stated in the code ($01C652).
	; The 8x8 tiles come from a table at $01C66D (MovingCoinTiles).
	; $E8 -> $4C
	; $EA -> $4E
	; $FA -> $5E
	org $01C652
		LDA #$4C
	org $01C66D
		db $4E,$5E,$4E


	; Sparkle is generated by routine at $02858F.
	; Its own code starts at $028ED2.
	; Tiles come from a table at $028ECC.
	; $5C -> $5F
	; $66 -> $66 (part of the smoke puff)
	; $6C -> $6E
	; $6D -> $6F
	; $6E -> $7E
	; $FF -> $7F
	org $028ECC
		db $66,$7E,$7F,$6F,$6E,$5F


	; Debris code starts at $028F8B.
	; Tiles come from a table at $028B84 (BrokenBlock2).
	; $3C -> $4A
	; $3D -> $4B
	org $028B84
		db $4A,$4B,$4B,$4A,$4A,$4B,$4B,$4A


	; Koopa GFX routine starts at $018BC3 (shared with other sprites).
	; Wings have a really flexible table at $019E10 (KoopaWingDispXLo).
	; Dump:
	;	LDA $157C,x : PHA
	;	LDY $15AC,x
	;	BEQ .NoTurn
	;	LDA #$02 : STA $1602,x
	;	LDA #$00
	;	CPY #$05
	;	BCC $01 : INC A
	;	EOR $157C,x
	;	STA $157C,x
	;
	;	.NoTurn
	;	LDY $9E,x
	;	LDA $88F0,y
	;	AND #$40
	;	BNE .Complicated
	;	JSR $9F0D		; This looks promising...
	;	BRA .End
	;
	;	.Complicated		; Expensive way of moving sprite.
	;	LDA $1602,x
	;	LSR A
	;	LDA $D8,x
	;	PHA
	;	SBC #$0F
	;	STA $D8,x
	;	LDA $14D4,x
	;	PHA
	;	SBC #$00
	;	STA $14D4,x
	;	JSR $9D67		; This seems important as well!
	;	PLA : STA $14D4,x
	;	PLA : STA $D8,x
	;	LDA $9E,x
	;	CMP #$08
	;	BCC .End
	;	JSR $9E28		; Wing routine (KoopaWingGfxRt)
	;
	;	.End
	;	PLA : STA $157C,x
	;	RTS




	; Mario's DMA routine starts at $00A300.
	; Note that PCE.asm hijacks this at $00A350.
	; DMA channel 2 is remapped to 1.
	; $00A390 comes right after and is the generic animation routine.
	;
	; Generic RAM:
	; - $0D76: 16-bit pointer to GFX (bank 7E).
	; - $0D78: 16-bit pointer to GFX (bank 7E).
	; - $0D7A: 16-bit pointer to GFX (bank 7E).
	; - $0D7C: 16-bit pointer to GFX (bank 7E).
	; - $0D7E: 16-bit pointer to GFX (bank 7E).
	; - $0D80: 16-bit pointer to GFX (bank 7E).
	;
	; Player 1 RAM:
	; - $0D82: 16-bit pointer to player 1 palette (bank 00).
	;	Value comes from table at $00E2A2.
	;	Index is (($19*2)|$0DB3)*2
	;
	; - $0D84: Number of tiles to upload for player 1.
	;	Set to 0x0A during levels from $00F699.
	;	Set to 0x06 during OW from $0485D3.
	;
	; - $0D85: Five 16-bit pointers to top half of GFX (bank 7E).
	; - $0D8F: Five 16-bit pointers to bottom half of GFX (bank 7E).
	;	These pointers seem to be set up at $00F636.
	;
	;	Written at:
	;	- $00F64C (STA $0D85)	\
	;	- $00F653 (STA $0DBF)	 |
	;	- $00F66A (STA $0D87)	 | Player
	;	- $00F671 (STA $0D91)	 |
	;	- $00F67F (STA $0D89)	 |
	;	- $00F686 (STA $0D93)	/
	;
	;	- $01E1AB (STA $0D8B)	\
	;	- $01E1B2 (STA $0D95)	 |
	;	- $01EEB7 (STA $0D8B)	 | Yoshi
	;	- $01EEBE (STA $0D95)	 |
	;	- $01EECC (STA $0D8D)	 |
	;	- $01EED3 (STA $0D97)	/
	;
	;	- $02EA41 (STA $0D8B)	\ Podoboo
	;	- $02EA48 (STA $0D95)	/
	;
	;
	;
	;
	;
	;
	; Dump:
	;	REP #$20		; A 16 bit
	;	LDX #$04		; Channel bit
	;	LDY $0D84		; Number of tiles to load
	;	BEQ .NoPalWrite		; Don't update palette if no tiles
	;	LDY #$86 : STY $2121	;\
	;	LDA #$2200 : STA $4320	; |
	;	LDA $0D82 : STA $4322	; | Upload player 1 palette
	;	LDY #$00 : STY $4324	; | (channel remapped by VR2)
	;	LDA #$0014 : STA $4325	; |
	;	STX $420B		;/
	;	.NoPalWrite
	;
	;	LDY #$80 : STY $2115	;\
	;	LDA #$1801 : STA $4320	; |
	;	LDA #$67F0 : STA $2116	; |
	;	LDA $0D99 : STA $4322	; | Upload tile 0x07F
	;	LDY #$7E : STY $4324	; | (channel remapped by VR2)
	;	LDA #$0020 : STA $4325	; |
	;	STX $420B		;/
	;
	;	LDA #$6000 : STA $2116	;\ Set up main loop 1
	;	LDX #$00		;/
	;
	;	.MainLoop1
	;	LDA $0D85,x : STA $4322	;\
	;	LDA #$0040 : STA $4325	; |
	;	LDY #$04 : STY $420B	; | Upload top half of tiles
	;	INX #2			; | (channel remapped by VR2)
	;	CPX $0D84		; |
	;	BCC .MainLoop1		;/
	;
	;	LDA #$6100 : STA $2116	;\ Set up main loop 2
	;	LDX #$00		;/
	;
	;	.MainLoop2
	;	LDA $0D8F,x : STA $4322	;\
	;	LDA #$0040 : STA $4325	; |
	;	LDY #$04 : STY $420B	; | Upload bottom half of tiles
	;	INX #2			; | (channel remapped by VR2)
	;	CPX $0D84		; |
	;	BCC .MainLoop2		;/
	;	SEP #$20		; A 8 bit
	;	RTS			; Return














	Bank $00
		$0000-$1FFF		; SNES LoRAM
		$2000-$20FF		; Reserved for MSU-1
		$2100-$21FF		; PPU registers
		$2200-$22FF		; SA-1 write registers
		$2300-$23FF		; SA-1 read registers
		$2400-$2FFF		; Unused
		$3000-$37FF		; I-RAM
		$3800-$3FFF		; Unused
		$4000-$43FF		; SNES hardware registers
		$4400-$5FFF		; Unused
		$6000-$7FFF		; BW-RAM image
		$8000-$FFDF		; LoROM
		$FFB0-$FFFF		; Internal ROM header

	Banks $01-$3F
		$0000-$1FFF		; SNES LoRAM (mirrored from $7E0000-$7E1FFF)
		$2000-$20FF		; Reserved for MSU-1
		$2100-$21FF		; PPU registers
		$2200-$22FF		; SA-1 write registers
		$2300-$23FF		; SA-1 read registers
		$2400-$2FFF		; Unused
		$3000-$37FF		; I-RAM
		$3800-$3FFF		; Unused
		$4000-$43FF		; SNES hardware registers
		$4400-$5FFF		; Unused
		$6000-$7FFF		; BW-RAM image
		$8000-$FFFF		; LoROM

	Banks $40-$43
		$0000-$FFFF		; BW-RAM

	Banks $44-$4F
		$0000-$FFFF		; BW-RAM image

	Banks $50-$5F
		$0000-$FFFF		; Unused

	Banks $60-$6F
		$0000-$FFFF		; BW-RAM bit map area, only accessible by SA-1

	Banks $70-$7D
		$0000-$FFFF		; Unused

	Banks $7E-$7F
		$0000-$FFFF		; SNES WRAM

	Banks $80-$BF
		$0000-$1FFF		; SNES LoRAM (mirrored from $7E0000-$7E1FFF)
		$2000-$20FF		; Reserved for MSU-1
		$2100-$21FF		; PPU registers
		$2200-$22FF		; SA-1 write registers
		$2300-$23FF		; SA-1 read registers
		$2400-$2FFF		; Unused
		$3000-$37FF		; I-RAM
		$3800-$3FFF		; Unused
		$4000-$43FF		; SNES hardware registers
		$4400-$5FFF		; Unused
		$6000-$7FFF		; BW-RAM image
		$8000-$FFFF		; LoROM

	Banks $C0-$FF
		$0000-$FFFF		; HiROM



BW-RAM image can be set to blocks $00-$1F and $78-$7F.
SNES CPU can only access blocks $00-$1F.
Blocks $78-$7F go to BW-RAM bit map area.
BW-RAM image can be set individually for SNES and SA-1.

	ROM map:

		Banks $00-$0F: SMW ROM (+some AddmusicK stuff)		;\
		Banks $10-$11: Lunar Magic data				; | 1MB
		Banks $12-$17: SNES expanded code			; |
		Banks $18-$1F: SA-1 expanded code			;/
		Banks $20-$3F: ----					; > 1MB
		Banks $80-$BF: ----					; > 2MB
		Banks $C0-$FF: ----					; > 4MB



	Memory remap plan:

		SNES has two types of RAM: WRAM and SRAM.
		WRAM is split into LoRAM and ExRAM.
		 LoRAM goes in $0000-$1FFF in banks $00-$3F and $80-$BF.
		 ExRAM goes in banks $7E-$7F.
		 SRAM goes in $0000-$7FFF of banks $70-$7D and $F0-$FF.

		SA-1 games have two additional types of RAM: I-RAM and BW-RAM.
		 I-RAM goes in $3000-$37FF of banks $00-$3F and $80-$BF.
		 BW-RAM goes in banks $40-$43 and is mirrored to $6000-$7FFF of banks $00-$3F and $80-$BF.
		 SNES dev manual says BW-RAM is up to 2Mbit. No game had that much so most people think it's just 1Mbit.
		 SA-1 also kills SRAM so banks $70-$7D are useless.

		The easiest remap is moving ExRAM to BW-RAM: $7E2000-$7FFFFF -> $402000-$41FFFF.
		This leaves $400000-$401FFF to be used as the main BW-RAM image.
		DP can be put in I-RAM. The rest of I-RAM can be used for cool SA-1 stuff.

		BW-RAM map:
		Bank $40
		$0000-$1FFF:	8 KB	BW-RAM image.
		$2000-$27FF:	2 KB	SRAM area.
		$2800-$2A1F:	544 B	OAM mirror.
		$2A20-$2A9F:	128 B	OAM assembly area.
		$2AA0-$2AFF:	96 B	----
		$2B00-$2BFF:	256 B	Extended SRAM buffer
		$2C00-$2EFF:	768 B	Extended misc. data. Includes tilemaps for menus and such.
		$2F00-$2FFF:	256 B	Message box data.
		$3000-$33FF:	1 KB	VR2 RAM
		$3400-$34BF:	196 B	Midway table.
		$34C0-$ACFF:	30 KB	----
		$AD00-$B8FF:	3 KB	Decompression buffer for 3bpp GFX.
		$B900-$C0FF:	2 KB	BG2 tilemap.
		$C100-$C7FF:	1.75 KB	----
		$C800-$FFFF:	14 KB	Map16 lo byte table during levels. Path data and VRAM buffer during overworld.
		Bank $41:
		$0000-$3FFF:	16 KB	BG2 event tilemap for overworld.
		$4000-$7FFF:	16 KB	BG2 tilemap for overworld.
		$8000-$8182:	387 B	----
		$8183-$837A:	504 B	Used by Lunar Magic for VRAM stuff.
		$837B-$977A:	5 KB	Stripe image table. First word is used to remember the next free slot.
		$977B-$9A7A:	768 B	----
		$9A7B-$9C7A:	512 B	Wiggler segment coords.
		$9C7B-$BBFF:	7.88 KB	Mostly empty.
		$BC00-$BFFF:	1 KB	Lunar Magic BG data
		$C000-$C06F:	112 B	Reserved for Lunar Magic.
		$C070-$C0FF:	144 B	Lunar Magic ExAnimation data (kill it!)
		$C100-$C2FF:	512 B	----
		$C300-$C6FF:	1 KB	Lunar Magic BG data
		$C700-$C7FF:	256 B	----
		$C800-$FFFF:	14 KB	Map16 hi byte table.

		I-RAM map:
		$3000-$30FF:	256 B	SNES/SA-1 DP
		$3100-$34FF:	1024 B	Sprite data. Accessed via SA-1 DP (indexed 16-bit X) during sprite processing.
		$3500-$369F:	416 B	----
		$36A0-$36FF:	96 B	Engine core data
		$3700-$377F:	128 B	CC/decompression buffer
		$3780-$37FF:	128 B	SA-1 stack.

		BW-RAM image map:
		$6000-$607F:	128 B	Hi OAM priority 1.
		$6080-$60FF:	128 B	Hi OAM priority 2.
		$6100-$610F:	16 B	Misc.
		$6110-$61FF:	240 B	----
		$6200-$63FF:	512 B	Lo OAM priority 1.
		$6400-$65FF:	512 B	Lo OAM priority 2.
		$6600-$667F:	128 B	----
		$6680-$6681:	2 B	Misc.
	>	$6682-$6694:	19 B	Dynamic palette data.
		$6695-$66F8:	100 B	Lunar Magic VRAM data.
		$66F9-$66FA:	2 B	ID of current sprite being processed (0x0000-0x000F)
		$66FB-$66FC:	2 B	Index of current sprite being processed (0x0100-0x03D0)
	HC	$66FD-$6700:	4 B	----
	>	$6701-$6AF4:	1012 B	Dynamic palette data.
		$6AF5-$6B74:	128 B	----
		$6B75-$6C73:	255 B	Sprites loaded table
		$6C74-$6D74:	256 B	VR2 upload table.
		$6D75-$6D75:	1 B	----
		$6D76-$6D9A:	37 B	Player GFX DMA data.
		$6D9B-$6D9E:	4 B	Misc.
		$6D9F-$6D9F:	1 B	HDMA enable mirror.
		$6DA0-$6DAD:	14 B	Controller data.
		$6DAE-$6EF8:	331 B	Misc.
		$6EF9-$6F28:	48 B	Lo OAM priority 0.
		$6F29-$6F2F:	7 B	----
		$6F30-$6F49:	26 B	Misc.
		$6F4A-$6FAD:	100 B	Reserved for player 2
		$6FAE-$74C7:	1.3 KB	Misc.
		$74C8-$768F:	456 B	Lo OAM priority 3.
		$7690-$7691:	2 B	----
		$7692-$786B:	473 B	Misc.
		$786C-$7877:	12 B	Hi OAM priority 0.
		$7878-$787A:	3 B	Misc.
		$787B-$7882:	8 B	OAM indexes
		$7883-$7886:	4 B	----
		$7887-$790E:	136 B	Misc.
		$790F-$791A:	12 B	----
		$791B-$7937:	29 B	Misc.
		$7938-$79B7:	128 B	----
		$79B8-$79F7:	64 B	Exit table.
		$79F8-$7B77:	384 B	Object collected table.
		$7B78-$7BA2:	43 B	Misc.
		$7BA3-$7BE2:	64 B	Mode 7 buffer.
		$7BE3-$7BE3:	1 B	Misc.
		$7BE4-$7BE5:	2 B	VRAM address for BG1 upload, big endian.
		$7BE6-$7CE5:	256 B	VRAM buffer for BG1.
		$7CE6-$7CE7:	2 B	VRAM address for BG2 upload, big endian.
		$7CE8-$7DE7:	256 B	VRAM buffer for BG2.
		$7DE8-$7EA1:	186 B	Misc.
		$7EA2-$7F2E:	141 B	SMW SRAM buffer.
		$7F2F-$7F48:	26 B	Misc.
		$7F49-$7FBA	114 B	Hi OAM priority 3.
		$7FBB-$7FED:	51 B	----
		$7FEE-$7FFF:	18 B	Misc.

		Todo:
		X> $0000-$00FF --->	$3000-$30FF	; direct page
		X> $0100-$1FFF --->	$6100-$7FFF	; most addresses
		X> $700000-$7007FF --->	$402000-$4027FF	; save data
		X> $7EC800-$7EFFFF --->	$40C800-$40FFFF	; map16 lo
		X> $7FC800-$7FFFFF --->	$41C800-$41FFFF	; map16 hi
		> $6200-$649F --->	$402800-$402A1F	; main OAM mirror
		X> $64A0-$665F --->	$0200-$03BF	; windowing table
		X> $6660-$667F --->	$03C0-$03DF	; circle table
		X> $6AF6-$6D75 --->	$7EB100-$7EB37F	; decompressed graphics
		> $6EF9-$6F2F --->	$0060-$009F	; status bar tilemap
		> $74C8-$7691 --->	$3100-$33FF	; sprite data
		> $7938-$79B7 --->	$6B75-$6C73	; sprite loaded status
		X> $7EAD00-$7EB8FF --->	$40AD00-$40B8FF	; decompression buffer
		> $7EB900-$7EC0FF --->	$40B900-$40C0FF	; BG2 tilemap
		X> $7F0000-$7F3FFF --->	$410000-$413FFF	; BG2 animated tile data for overworld
		X> $7F4000-$7F7FFF --->	$414000-$417FFF	; BG2 tilemap data for overworld
		X> $7F8000-$7F8182 --->	ROM, not static	; kill OAM routine
		> $7F8183-$7F837A --->	$418183-$41837A	; Lunar Magic data
		> $7F837B-$7F977A --->	$41837B-$41977A	; stripe image table
		X> $7F977B-$7F9A7A --->	$7EB380-$7EB67F	; game over graphics
		> $7F9A7B-$7F9C7A --->	$419A7B-$419C7A	; wiggler coords
		> $7F9C7B-$7FC7FF --->	$419C7B-$41C7FF	; misc

		> Have SA-1 decompress data for SNES to store in its WRAM (since only SNES can upload to VRAM anyway).
		> Completely kill Lunar Magic's ExAnimation and let VR2 handle dynamic uploads.

		WRAM map:
		LoRAM:
		$0000-$001F:	32 B	SNES scratch RAM.
		$0020-$005F:	64 B	Tilemap for top row of dynamic BG3.
		$0060-$009F:	64 B	Status bar tilemap for dynamic BG3.
		$00A0-$00B5:	22 B	Colors 0x01-0x0B for dynamic BG3 palette.
		$00B6-$00CB:	22 B	Status bar palette for dynamic BG3.
		$00CC-$00FF:	22 B	----
		$0100-$01FF:	256 B	SNES stack.
		$0200-$03FF:	512 B	Table for HDMA channel 2 (message box).
		$0400-$05FF:	512 B	Table for HDMA channel 3.
		$0600-$07FF:	512 B	Table for HDMA channel 4.
		$0800-$09FF:	512 B	Table for HDMA channel 5.
		$0A00-$0BFF:	512 B	Table for HDMA channel 6.
		$0C00-$0DFF:	512 B	Table for HDMA channel 7.
		$0E00-$0FFF:	512 B	Core SNES code.
		$1000-$1FFF:	4 KB	Extended FastROM code area.
		Bank $7E:
		$2000-$7CFF:	24 KB	GFX32, decompressed.
		$7D00-$ACFF:	12 KB	GFX33, decompressed.
		$AD00-$B0FF:	1 KB	AddmusicK data. (?)
		$B100-$B37F:	640 B	Decompressed GFX for overworld.
		$B380-$B67F:	768 B	Decompressed Game Over graphics.
		$B680-$FFFF:	18.4 KB	----
		Bank $7F:
		$0000-$FFFF:	64 KB	Decompressed GFX for animated tiles. Used by VR2.

		OAM handling:
		Priority 0:	12 tiles
		Priority 1:	128 tiles
		Priority 2:	128 tiles
		Priority 3:	114 tiles (57 + 57 tiles in 3.5 mode)
		Lo OAM is transferred from BW-RAM to the I-RAM mirror via SA-1 DMA in the priority order 0 -> 1 -> 2 -> 3.
		Hi OAM is copied in to the buffer in BW-RAM. Then it is compressed into the I-RAM mirror.
		During NMI, SNES uploads the I-RAM mirror to internal OAM.
		Priority 0 is used for UI stuff and goes at the very front.
		Priority 1 and 2 are used as SMW's $0200 and $0300 respectively.
		Priority 3 is more complex. VR2 has three modes for it:
		 - 3.0 mode: displayed at the very back.
		 - 0.5 mode: displayed behind priority 0 and in front of priority 1.
		 - 3.5 mode: the first half of priority 3 is displayed in 0.5 mode and the second half in 3.0 mode.


		List of SMW sprite tables:
		$AA		Y speed
		$B6		X speed
		$C2		Misc
		$9E		Sprite number
		$D8		Y pos, lo byte
		$E4		X pos, lo byte
		$14C8		Sprite state
		$14D4		Y pos, hi byte
		$14E0		X pos, hi byte
		$14EC		Fraction bits for Y speed
		$14F8		Fraction bits for X speed
		$1504		Misc
		$1510		Misc
		$151C		Misc
		$1528		Fireball HP
		$1534		Misc
		$1540	!	Stun timer
		$154C	!	Disable player contact timer
		$1558	!	Sinking in lava/mud timer
		$1564	!	Disable sprite contact timer
		$1570		Misc
		$157C		Horizontal direction
		$1588		Collision flags
		$1594		Misc
		$15A0		Offscreen flag, horizontal
		$15AC		Misc
		$15B8		Slope data
		$15C4		Offscreen flag
		$15D0		About to be eaten flag
		$15DC		Interact with objects flag
		$15EA		OAM index, lo byte
		$15F6		YXPPCCCT
		$1602		Graphics pointer
		$160E		Misc
		$161A		Index to sprite load status table
		$1626		Consecutive enemies killed
		$1632		Behind scenery flag
		$163E	!	Misc
		$164A		Underwater flag
		$1656		Tweaker 1
		$1662		Tweaker 2
		$166E		Tweaker 3
		$167A		Tweaker 4
		$1686		Tweaker 5
		$186C		Offscreen flag, vertical
		$187B		Misc
		$190F		Tweaker 6
		$1FD6		Misc
		$1FE2	!	Misc

	SMW has 49 (0x31) sprite tables. That's 588 (0x24C) bytes of data.
	If I rewrite the engine to allow 16 sprites I need 784 (0x310) bytes.
	If I also remove one table it's exactly 0x300 bytes which fits much better into I-RAM.



	SNES only SA-1 write registers:

		$2200			; SA-1 CPU Control (CCNT)
		Format:
		 bit 0		SMEG0 - SNES message 0 to SA-1
		 bit 1		SMEG1 - SNES message 1 to SA-1
		 bit 2		SMEG2 - SNES message 2 to SA-1
		 bit 3		SMEG3 - SNES message 3 to SA-1
		 bit 4		SA-1 CPU NMI (from SNES CPU)
		 bit 5		SA-1 CPU reset (0 = reset, 1 = no reset)
		 bit 6		SA-1 CPU RDY B (0 = wait, 1 = pause SA-1)
		 bit 7		SA-1 CPU IRQ (from SNES CPU)

		$2201			; SNES CPU INT ENABLE (SIE)
		Format:
		 bit 5		CHDMA IRQEN
		 bit 7		SA-1 CPU IRQEN
		Bit 5 enables character conversion DMA IRQ.
		Bit 7 enables IRQ for SA-1.

		$2202			; SNES CPU INT CLEAR (SIC)
		Format:
		 bit 5		CHDMA IRQCL
		 bit 7		SA-1 CPU IRQCL
		Bit 5 stops character conversion DMA IRQ.
		Bit 7 stops IRQ for SA-1.

		$2203			; SA-1 CPU RESET VECTOR (CRV) lo byte
		$2204			; SA-1 CPU RESET VECTOR (CRV) hi byte

		$2205			; SA-1 CPU NMI VECTOR (CNV) lo byte
		$2206			; SA-1 CPU NMI VECTOR (CNV) hi byte

		$2207			; SA-1 CPU IRQ VECTOR (CIV) lo byte
		$2208			; SA-1 CPU IRQ VECTOR (CIV) hi byte


		$2220			; SET SUPER MMC BANK C (CXB)
		$2221			; SET SUPER MMC BANK D (DXB)
		$2222			; SET SUPER MMC BANK E (EXB)
		$2223			; SET SUPER MMC BANK F (FXB)
		Format:
		 bits 0-2	Bank area selection
		 bit 7		Bank image projection
		Setting bit 7 causes the area specified by bits 0-2 to be projected into $8000-$FFFF of LoROM banks.
		MMC bank C is projected to banks $00-$1F.
		MMC bank D is projected to banks $20-$3F.
		MMC bank E is projected to banks $80-$9F.
		MMC bank F is projected to banks $A0-$BF.
		MMC banks are HiROM and are projected like this:
		 $C00000-$C07FFF -> $008000-$00FFFF
		 $C08000-$C0FFFF -> $018000-$01FFFF
		 $C10000-$C17FFF -> $028000-$02FFFF
		 $C18000-$C1FFFF -> $038000-$03FFFF
		 [...]
		 $CF8000-$CFFFFF -> $1F8000-$1FFFFF

		$2224			; SNES CPU BW-RAM ADDRESS MAPPING (BMAPS)
		Selects which 2KB chunk of BW-RAM will be projected to the BW-RAM image.
		Only affects SNES, and only values 0x00-0x1F are usable.

		$2226			; SNES CPU BW-RAM WRITE ENABLE (SBWE)
		Bit 7 toggles BW-RAM write enable for SNES.
		 0 = SNES can not write to BW-RAM.
		 1 = SNES can write to BW-RAM.

		$2228			; BW-RAM WRITE PROTECTED AREA (BWPA)
		Specifies how much of BW-RAM is protected.
		Formula for number of bytes protected is:
		 0x200*0x2^$2228

		$2229			; SA-1 I-RAM WRITE PROTECTED AREA (SIWP)
		Each bit enables a corresponding 256 byte area.
		Bit X enables the area $3X00-$3XFF.



	SA-1 only SA-1 write registers:	

		$2209			; SNES CPU CONTROL (SCNT)
		Format:
		 bit 0		CMEG0 - SA-1 message 0 to SNES
		 bit 1		CMEG1 - SA-1 message 1 to SNES
		 bit 2		CMEG2 - SA-1 message 2 to SNES
		 bit 3		CMEG3 - SA-1 message 3 to SNES
		 bit 4		SNES CPU NVSW
		 bit 6		SNES CPU IVSW
		 bit 7		SNES CPU IRQ
		Bit 4 toggles ROM (0) and SNES CPU NMI vector register (1)
		Bit 6 toggles ROM (0) and SNES CPU IRQ vector register (1)
		Bit 7 toggles IRQ interrupt, 0 = no interrupt, 1 = IRQ interrupt

		$220A			; SA-1 CPU INT ENABLE (CIE)
		Format:
		 bit 4		SNES CPU NMIEN
		 bit 5		DMA IRQEN - IRQ control to SA-1 at end of SA-1 DMA
		 bit 6		Timer IRQEN
		 bit 7		CPU IRQEN
		Setting bit 4 allows SNES to control NMI for SA-1.
		Setting bit 6 allows SA-1 IRQ to trigger naturally.
		Setting bit 7 allows SNES to control IRQ for SA-1.

		$220B			; SA-1 CPU INT CLEAR (CIC)
		Format:
		 bit 4		SNES CPU NMICL
		 bit 5		DMA IRQCL - IRQ clear to SA-1 at end of SA-1 DMA
		 bit 6		Timer IRQCL
		 bit 7		CPU IRQCL
		Setting bit 4 disables SNES control of SA-1 NMI.
		Setting bit 6 disables SA-1 IRQ to trigger naturally.
		Setting bit 7 disables SNES control of SA-1 IRQ.

		$220C			; SNES CPU NMI VECTOR (SNV) lo byte
		$220D			; SNES CPU NMI VECTOR (SNV) hi byte

		$220E			; SNES CPU IRQ VECTOR (SIQ) lo byte
		$220F			; SNES CPU IRQ VECTOR (SIQ) hi byte

		$2210			; H/V TIMER CONTROL (TMC)
		Format:
		 bit 0		HEN - Toggle IRQ at H-timer value
		 bit 1		VEN - Toggle IRQ at V-timer value
		 bit 7		HVSELB - 0 = HV timer, 1 = Linear timer

		$2211			; SA-1 CPU TIMER RESTART (CTR)
		Writing any value to this register resets the timer to 0.

		$2212			; SET H-COUNT (HCNT) lo byte
		$2213			; SET H-COUNT (HCNT) hi bit
		HV timer: Timer IRQ H count value (0x000-0x154)
		Linear timer: Lower 9 bits of the timer IRQ linear counter (0x000-0x1FF)

		$2214			; SET-V COUNT (VCNT) lo byte
		$2215			; SET-V COUNT (VCNT) hi bit
		HV timer: Timer IRQ V count value. NTSC: 0x000-0x105, PAL: 0x000-0x137
		Linear timer: Upper 9 bits of the timer IRQ linear counter (0x000-0x1FF)

		$2225			; SA-1 CPU BW-RAM ADDRESS MAPPING (BMAP)
		Bit 7 toggles the BW-RAM area to be projected:
		 0 = Banks $40-$43 are projected.
		 1 = Banks $60-$6F are projected.
		Bits 0-6 specify the 2KB chunk of BW-RAM to be projected.
		Only values 0x00-0x1F are valid for banks $40-$43.

		$2227			; SA-1 CPU BW-RAM WRITE ENABLE (CBWE)
		Bit 7 toggles BW-RAM write enable for SA-1:
		 0 = SA-1 can not write to BW-RAM.
		 1 = SA-1 can write to BW-RAM.

		$222A			; SA-1 I-RAM WRITE PROTECTION (CIWP)
		Each bit enables a corresponding 256 byte area.
		Bit X enables the area $3X00-$3XFF.

		$2230			; DMA CONTROL (DCNT)
		Format:
		 bits 0-1		Source Device: 00 = ROM, 01 = BW-RAM, 10 = I-RAM
		 bit 2			Destination Device: 0 = BW-RAM, 1 = I-RAM
		 bit 4			Character conversion DMA type:
					 0 = SA-1 CPU -> I-RAM (CHR conv 2)
					 1 = BW-RAM -> I-RAM (CHR conv 1)
		 bit 5			DMA mode selection: 0 = Normal DMA, 1 = Character conversion DMA
		 bit 6			Priority setting: 0 = SA-1 CPU priority, 1 = DMA priority
		 bit 7			DMA control: 0 = DMA disable, 1 = DMA enable

		$2238			; DMA TERMINAL COUNTER (DTC) lo byte
		$2239			; DMA TERMINAL COUNTER (DTC) hi byte
		Number of bytes to transfer during DMA.

		$223F			; BW-RAM BITMAP FORMAT (BBF)
		Bit 7 toggles format:
		 0 = 4bpp
		 1 = 2bpp

		$2240-$2247		; BIT MAP REGISTER FILE (BRF) buffer 1
		$2248-$224F		; BIT MAP REGISTER FILE (BRF) buffer 2

		$2250			; ARITHMETIC CONTROL (MCNT)
		Bit 0 toggles between multiplication and division (0 = mul, 1 = div)
		Bit 1 enables cumulative sum and overwrites bit 0.
		Storing 1 to bit 1 also clears the result register.

		$2251			; ARITHMETIC PARAMETERS: MULTIPLICAND/DIVIDEND (MA) lo byte
		$2252			; ARITHMETIC PARAMETERS: MULTIPLICAND/DIVIDEND (MA) hi byte
		Expected format is signed 16-bit data.

		$2253			; ARITHMETIC PARAMETERS: MULTIPLIER/DIVISOR (MD) lo byte
		$2254			; ARITHMETIC PARAMETERS: MULTIPLIER/DIVISOR (MD) hi byte
		Expected format is signed 16-bit data for multiplication and unsigned 16-bit data for division.
		Operation is performed upon writing to $2254.
		Multiplier/divisor must be reset for every operation.

		$2258			; VARIABLE-LENGTH BIT PROCESSING (VBD)
		Format:
		 bits 0-3		Significant bit length of data previously stored.
		 bit 7			Variable-length data read mode:
					 0 = Auto-increment
					 1 = Fixed mode

		$2259			; VARIABLE-LENGTH BIT GAME PAK ROM START ADDRESS (VDA) lo byte
		$225A			; VARIABLE-LENGTH BIT GAME PAK ROM START ADDRESS (VDA) hi byte
		$225B			; VARIABLE-LENGTH BIT GAME PAK ROM START ADDRESS (VDA) bank byte
		Variable-length bit execution starts upon writing to $225B.


	Global SA-1 write registers:

		$2231			; CHARACTER CONVERSION DMA PARAMETERS (CDMA)
		Format:
		 bits 0-1	Character conversion DMA color mode:
				 00 = 8bpp
				 01 = 4bpp
				 10 = 2bpp
				 11 = invalid
		bits 2-4	Number of virtual VRAM horizontal characters:
				 000 = 1
				 001 = 2
				 010 = 4
				 011 = 8
				 100 = 16
				 101 = 32
				 110 = invalid
				 111 = invalid
		bit 7		Set to 1 when character conversion DMA is completed.

		$2232			; DMA SOURCE DEVICE START ADDRESS (SDA) lo byte
		$2233			; DMA SOURCE DEVICE START ADDRESS (SDA) hi byte
		$2234			; DMA SOURCE DEVICE START ADDRESS (SDA) bank byte
		Must be written in the order lo -> hi -> bank.

		$2235			; DMA DESTINATION START ADDRESS (DDA) lo byte
		$2236			; DMA DESTINATION START ADDRESS (DDA) hi byte
		$2237			; DMA DESTINATION START ADDRESS (DDA) bank byte
		Must be written in the order lo -> hi -> bank.
		Writing the last byte of the destination address initiates character conversion DMA.
		It the target is I-RAM writing to $2236 initiates transfer, otherwise it is initiated by writing to $2237.


	SNES only SA-1 read registers:

		$2300			; SNES CPU FLAG READ (SFR)
		Format:
		 bits 0-3	SA-1 to SNES message
		 bit 4		SNES CPU NMI vector setting: 0 = ROM data, 1 = SNV register data
		 bit 5		Character conversion DMA IRQ flag: 0 = No IRQ, 1 = IRQ (Character conversion 1 standby)
		 bit 6		SNES IRQ CPU vector setting: 0 = ROM data, 1 = SIV register data
		 bit 7		IRQ-flag from SA-1 CPU
		This register can not be cleared by reading it.

		$230E			; VERSION CODE REGISTER (VC)
		SA-1 device version.


	SA-1 only SA-1 read registers:

		$2301			; SA-1 CPU FLAG READ (CFR)
		Format:
		 bits 0-3	SNES to SA-1 message
		 bit 4		SNES CPU NMI: 0 = No NMI, 1 = NMI
		 bit 5		DMA IRQ: 0 = No IRQ, 1 = IRQ (end of DMA)
		 bit 6		Timer IRQ: 0 = No IRQ, 1 = Timer IRQ
		 bit 7		SNES IRQ: 0 = No IRQ, 1 = IRQ
		This register can not be cleared by reading it.

		$2302			; H-COUNT READ (HCR) lo byte
		$2303			; H-COUNT READ (HCR) hi bit
		HV timer: Timer IRQ H count value (0x000-0x154)
		Linear timer: Lower 9 bits of the timer IRQ linear counter (0x000-0x1FF)
		All HV counters are latched when register $2302 is read.

		$2304			; V-COUNT READ (VCR) lo byte
		$2305			; V-COUNT READ (VCR) hi bit
		HV timer: Timer IRQ V count value. NTSC: 0x000-0x105, PAL: 0x000-0x137
		Linear timer: Upper 9 bits of the timer IRQ linear counter (0x000-0x1FF)

		$2306-$230A		; ARITHMETIC RESULT: PRODUCT/QUOTIENT/ACCUMULATIVE SUM (MR)
		Format:
		 Multiplication yields 32-bit signed data.
		 Division yields 16-bit unsinged data.
		 Cumulative sum yields 40-bit signed data.

		$230B			; ARITHMETIC OVERFLOW FLAG (OF)
		Bit 7 is set if overflow occured.

		$230C			; VARIABLE-LENGTH DATA READ PORT (VDP) lo byte
		$230D			; VARIABLE-LENGTH DATA READ PORT (VDP) hi byte
		16-bit data .resulting from barrel-shiftin the values stored in $2258.


Some ideas:

	Use 2 of the message flags as indexes for IRQ behaviour.
	Kill LM ExAnimation. It eats way too much memory.
	Have SA-1 process sprites while SNES processes level_code from WRAM.
	 SNES should still be able to access WRAM in FastROM speed.











